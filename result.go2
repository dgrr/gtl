package gtl

// Result represents the result of a function.
//
// A result has an expected value, which is T
// and an unexpected value, which is E. E is often used as error.
type Result[T, E any] struct {
	v T
	e Optional[E]
}

// NewResult returns a Result from 2 values. It is useful when we want
// to capture old-style function returning.
func NewResult[T any](v T, err error) (r Result[T, error]) {
	r.v = v
	if err != nil {
		r.e.Set(err)
	}

	return r
}

// Ok returns a Result holding an expected value.
//
// If `r` was previously holding an unexpected value that is discarded.
func (r Result[T, E]) Ok(v T) Result[T, E] {
	r.v = v
	r.e.Drop()

	return r
}

// IsOk returns whether the Result has the unexpected value set or not.
func (r Result[T, E]) IsOk() bool {
	return !r.e.Ok()
}

// Err returns a Result holding an unexpected value (an error).
func (r Result[T, E]) Err(e E) Result[T, E] {
	r.e.Set(e)

	return r
}

// Any takes from input either T or E. If E is defined, V is not used.
func (r Result[T, E]) Any(v T, e E) Result[T, E] {
	r.e.Set(e)
	if !r.e.Ok() {
		r.v = v
	}
	
	return r
}

// Or sets the value `v` only if the error was previously set.
// That means: In case the Result has failed, set this alternative value.
//
// If the Result is holding an error, the error is cleared out and `v` is set.
func (r Result[T, E]) Or(v T) Result[T, E] {
	if r.e.Ok() {
		r = r.Ok(v)
	}

	return r
}

// V returns the expected value.
func (r Result[T, E]) V() T {
	return r.v
}

// E returns the unexpected value.
func (r Result[T, E]) E() E {
	return r.e.V()
}

// VE returns V and E.
func (r Result[T, E]) VE() (T, E) {
	return r.V(), r.E()
}

// Then is executed if Result is not holding an unexpected error.
func (r Result[T, E]) Then(fn func(T)) Result[T, E] {
	if !r.e.Ok() {
		fn(r.v)
	}

	return r
}

// ThenE is executed if Result is not holding an unexpected error.
//
// The function must return a type E.
func (r Result[T, E]) ThenE(fn func(T) E) Result[T, E] {
	if !r.e.Ok() {
		r.e.Set(fn(r.v))
	}

	return r
}

// Else is executed if Result is holding an unexpected error.
func (r Result[T, E]) Else(fn func(E)) Result[T, E] {
	if r.e.Ok() {
		fn(r.e.V())
	}

	return r
}
