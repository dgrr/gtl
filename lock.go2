package gtl

import "sync"

// Locker wraps `T` with a sync.Locker.
type Locker[T any] struct {
	v T
	sync.Locker
}

func NewLocker[T any](v T, lck sync.Locker) *Locker[T] {
	if lck == nil {
		lck = &sync.Mutex{}
	}

	return &Locker[T]{
		v: v,
		Locker: lck,
	}
}

// V returns a pointer to `T`.
func (lck *Locker[T]) V() *T {
	return &lck.v
}

// Set sets the value wrapping the assign with the Lock and Unlock calls.
func (lck *Locker[T]) Set(v T) {
	lck.Lock()
	lck.v = v
	lck.Unlock()
}
